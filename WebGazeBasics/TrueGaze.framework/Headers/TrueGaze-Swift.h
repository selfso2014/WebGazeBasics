// Generated by Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import AVFoundation;
@import CoreGraphics;
@import CoreMedia;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TrueGaze",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// An animation type of calibration point
typedef SWIFT_ENUM(NSInteger, AnimationType, closed) {
/// Pulsate animation (default)
  AnimationTypePulsate = 0,
/// Rotate animation
  AnimationTypeRotate = 1,
/// Rotate and pulsate animation
  AnimationTypeAll = 2,
};

/// Indicates the state of the Gaze Point.
typedef SWIFT_ENUM(NSInteger, GazeState, closed) {
/// Gaze is being tracked
  GazeStateTracking = 0,
/// Calibration is in process
  GazeStateCalibrating = 1,
/// Unable to detect face. Tracking is disable.
  GazeStateFaceMissing = 2,
/// User’s gaze point is out of the device screen.
  GazeStateOutOfScreen = 3,
};


/// Protocol that can receive eye-tracking screen coordinates.
/// \code
/// // receiver protocol implementation
/// extension ViewController : Receiver {
///
///    // Initialization succeede.
///    func onInitialized() {
///        print("Initialization succeede.")
///    }
///
///    // errorCode 1000 : Key value is not normal, 1002 : Date expires.
///    func onInitializeFailed(errorCode: Int) {
///        print("Initialization failed. errorCode : \(errorCode)")
///    }
///
///    // called when calibraiton is done
///    func onCalibrationFinished() {
///        print("Calibration is finished")
///    }
///
///    // receive gaze point
///    func onGaze(xy: [Double], state: GazeState) {
///
///        if state == .tracking {
///            print("x : \(xy[0]) y : \(xy[1])")
///        }
///    }
///
/// }
///
/// \endcode
SWIFT_PROTOCOL("_TtP8TrueGaze8Receiver_")
@protocol Receiver
/// Method called when SessionHandler object is created normally.
- (void)onInitialized;
/// Method called when SessionHnadler object is <em>NOT</em> created normally.
/// \param errorCode 1000(The key value is not normal), 1001(App Package name is different from registered name), 1002(When the license period is expired).
///
- (void)onInitializeFailedWithErrorCode:(NSInteger)errorCode;
/// Method that receive eye-tracking screen coordinates. UI components code should run on main thread with <code>DispatchQueue.main.async</code>. 
/// \param xy [X, Y] coordinates.
///
/// \param state Indicates the state of the current gaze.
///
- (void)onGazeWithXy:(NSArray<NSNumber *> * _Nonnull)xy state:(enum GazeState)state;
@optional
/// Callback method that is called when calibration process is started.
- (void)onCalibrationStarted;
/// Callback method that is called when calibration process is finished.
- (void)onCalibrationFinished;
/// Method that camera image
/// \param sampleBuffer CMSampleBuffer(AVCaptureSession.Preset.vga640x480)
///
- (void)onImagesWithSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer;
/// Method that is called when two eyes are closed for a long time
/// \param lastSeenXY Indicates the coordinates the user saw before their eyes closed.
///
- (void)onClosedEyesWithLastSeenXY:(NSArray<NSNumber *> * _Nonnull)lastSeenXY;
/// <p align="center">
/// <img src="https://user-images.githubusercontent.com/16757294/59652693-cf119200-91c9-11e9-8dc3-ed1f9a6d082c.png" alt="Portrait">
/// </p>
/// Method that is called on the portrait mode when look upper side.
- (void)onPortraitLookUp;
/// <p align="center">
/// <img src="https://user-images.githubusercontent.com/16757294/59652694-cf119200-91c9-11e9-8289-4b357f36d477.png" alt="Portrait">
/// </p>
/// Method that is called on the portrait mode when look middle area.
- (void)onPortraitLookCenter;
/// <p align="center">
/// <img src="https://user-images.githubusercontent.com/16757294/59652692-cf119200-91c9-11e9-92cd-3400297cebdf.png" alt="Portrait">
/// </p>
/// Method that is called  on the portrait mode when look down side.
- (void)onPortraitLookDown;
/// <p align="center">
/// <img src="https://user-images.githubusercontent.com/16757294/43625543-8a5c6532-9728-11e8-9504-bc9412b8e9b3.png" alt="Landscape">
/// </p>
/// Method that is called on the landscape mode when look left side.
- (void)onLandscapeLookLeft;
/// <p align="center">
/// <img src="https://user-images.githubusercontent.com/16757294/43561521-5637d7fe-9652-11e8-89fc-1c60447a4665.png" alt="Landscape">
/// </p>
/// Method that is called on the landscape mode when look middle area.
- (void)onLandscapeLookCenter;
/// <p align="center">
/// <img src="https://user-images.githubusercontent.com/16757294/43625546-8cf04a34-9728-11e8-99dd-c48a5429b495.png" alt="Landscape">
/// </p>
/// Method that is called on the landscape mode when look right side.
- (void)onLandscapeLookRight;
@end

/// Device orientation
typedef SWIFT_ENUM(NSInteger, ScreenMode, closed) {
/// The eye-tracking framework supports a portrait interface orientation.
  ScreenModePortrait = 0,
/// The eye-tracking framework supports both landscape-left and landscape-right interface orientation.
  ScreenModeLandscape = 1,
/// The eye-tracking framework supports a landscape-left, with home button on the left, interface orientation.
  ScreenModeLandscapeLeft = 2,
/// The eye-tracking framework supports a landscape-right, with home button on the right, interface orientation.
  ScreenModeLandscapeRight = 3,
};

@class UIView;
@class UIFont;
@class UIColor;

/// A configuration that sets device orientation and uses calibration.
/// Manage the session that start, pause, resume and close.
SWIFT_CLASS("_TtC8TrueGaze14SessionHandler")
@interface SessionHandler : NSObject
/// Create eye-tracking session.
/// <ul>
///   <li>
///     Notes: Site of issuing key is https://truegaze.visual-camp.com/
///   </li>
/// </ul>
- (nonnull instancetype)initWithKey:(NSString * _Nonnull)key receiver:(id <Receiver> _Nonnull)receiver OBJC_DESIGNATED_INITIALIZER;
/// A configuration that set up eye tracking.
/// \param root Parent view for eye-tracking is active on screen.
///
/// \param mode Device orientation. (Portrait, Landscape, LandscapeLeft, LandscapeRight)
///
/// \param isCalibration A Boolean value that indicates whether using calibration mode or not. if true, app will start with calibration process.
///
///
/// throws:
/// Camera permission required
- (void)openSessionWithRoot:(UIView * _Nonnull)root mode:(enum ScreenMode)mode isCalibration:(BOOL)isCalibration;
/// Start eye-tracking
- (void)startSession;
/// Pause eye-tracking session.
- (void)pauseSession;
/// Resume eye-tracking session.
- (void)resumeSession;
/// Kill eye-tracking session.
- (void)closeSession;
/// Start Calibration process.
- (void)startCalibration;
/// Stop calibration proccess.
- (void)stopCalibration;
/// Abort calibration mode.
- (void)abortCalibration;
/// Method to specify to save the calibrated data
/// \param isWrite if true, save. (Defalut false)
///
- (void)setSaveCalibrationDataWithIsSave:(BOOL)isSave;
/// Load the stored calibration data. Returns true on success and immediately starts eye-tracking
- (BOOL)loadCalibrationData SWIFT_WARN_UNUSED_RESULT;
/// delete calibration data.  Returns true on success
- (BOOL)deleteCalibrationData SWIFT_WARN_UNUSED_RESULT;
/// Method which change the animation of calibration points
/// \param animation Animation type
///
- (void)setCalibrationAnimationWithAnimation:(enum AnimationType)animation;
/// Method which set the parent of calibration UI view.
- (void)setCalibrationRootViewWithRoot:(UIView * _Nonnull)root;
/// A configuration that create custom UI of calibration point.
- (void)setCalibrationUIWithUiView:(UIView * _Nonnull)uiView size:(CGSize)size;
/// A configuration that set custom calibration guide text. (default: “Focus a point”)
- (void)setCalibrationTextWithContents:(NSString * _Nonnull)contents font:(UIFont * _Nullable)font textColor:(UIColor * _Nullable)textColor;
/// Determines on-screen visibility of calibration guide text. (default: true)
- (void)setCalibrationTextVisibilityOn:(BOOL)on;
/// A configuration that determines whether to show preview display or not.
/// \param enable A Boolean value that indicates whether the preview is appeared.
///
/// \param root A parent view for the preview.
///
- (void)setDisplayWithEnable:(BOOL)enable root:(UIView * _Nonnull)root;
/// Method which change protocol implementation.
- (void)setReceiverWithReceiver:(id <Receiver> _Nonnull)receiver;
/// Converts gaze point from UIKit coordinate system to SpriteKit coordinate system.
- (NSArray<NSNumber *> * _Nonnull)ui2GameAxisWithGazePoint:(NSArray<NSNumber *> * _Nonnull)gazePoint SWIFT_WARN_UNUSED_RESULT;
/// Converts position from SpriteKit coordinate system to UIKit coordinate system.
- (CGPoint)game2UIAxisWithPosition:(CGPoint)position SWIFT_WARN_UNUSED_RESULT;
/// Get SDK version
- (NSString * _Nonnull)getFrameworkVersion SWIFT_WARN_UNUSED_RESULT;
/// Determines on-screen visibility of StatusView. (default: true)
- (void)setStatusViewVisibilityOn:(BOOL)on;
/// Set on-screen position of StatusView.
- (void)setStatusViewPositionWithPosition:(CGPoint)position;
/// Method to set threshold value to recognize eye-blink
/// \param threshold It means the threshold value and the unit is ms.(Defalut 500ms)
///
- (void)setBlinkThresholdWithThreshold:(double)threshold;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end





@class AVCaptureOutput;
@class AVCaptureConnection;
@class AVCaptureMetadataOutput;
@class AVMetadataObject;

@interface SessionHandler (SWIFT_EXTENSION(TrueGaze)) <AVCaptureMetadataOutputObjectsDelegate, AVCaptureVideoDataOutputSampleBufferDelegate>
- (void)captureOutput:(AVCaptureOutput * _Nonnull)output didOutputSampleBuffer:(CMSampleBufferRef _Nonnull)sampleBuffer fromConnection:(AVCaptureConnection * _Nonnull)connection;
- (void)captureOutput:(AVCaptureMetadataOutput * _Nonnull)output didOutputMetadataObjects:(NSArray<AVMetadataObject *> * _Nonnull)metadataObjects fromConnection:(AVCaptureConnection * _Nonnull)connection;
@end





#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
